%% 创建一个金刚石TB模型并拟合参数
%% 
% 
%% 创建模型
%% 
% * 声明一个空的模型；初始化其轨道数

%addpath('..');
Diamond = HR(8)
%% 
% * 修改POSCAR_Diamond格式
%% 
% _generated by phonopy_
% 
% _1.0_
% 
% _0.0000000000000000    1.7868549235128819    1.7868549235128819_
% 
% _1.7868549235128819    0.0000000000000000    1.7868549235128819_
% 
% _1.7868549235128819    1.7868549235128819    0.0000000000000000_
% 
% _C_
% 
% _8_
% 
% _Direct_
% 
% _0.2500000000000000  0.2500000000000000  0.2500000000000000 C s *I*_
% 
% _0.2500000000000000  0.2500000000000000  0.2500000000000000 C p x_
% 
% _0.2500000000000000  0.2500000000000000  0.2500000000000000 C p y_
% 
% _0.2500000000000000  0.2500000000000000  0.2500000000000000 C p z_
% 
% _0.0000000000000000  0.0000000000000000  0.0000000000000000 C s *I*_
% 
% _0.0000000000000000  0.0000000000000000  0.0000000000000000 C p x_
% 
% _0.0000000000000000  0.0000000000000000  0.0000000000000000 C p y_
% 
% _0.0000000000000000  0.0000000000000000  0.0000000000000000 C p z_
%% 
% * 导入POSCAR

Diamond = Diamond <'POSCAR_Diamond'
%% 
% * 进行 nn_sk 搜索
% * 这里 search_range 取 【2 2 2】因为是小开角元胞
% * Accuracy 取小数点3位，maxR值取 2.8 埃

search_range = [2 2 2];
Accuracy = 1e-3;
r_max_search = 2.8;
Diamond = Diamond.nn(search_range,Accuracy ,r_max_search);
%% 
% * 可以简要获取一下这一步的信息，看下Rnn排名

[Rnn,~,~,~] = Diamond.nn_information();
%% 
% * 这里我们取最近邻hopping
% * 我们关心 s轨道与p轨道的劈裂

Diamond = Diamond.H_TBSK_gen('level_cut',1,'per_dir',[1 1 1],'onsite',true); 
Diamond.autohermi
%% 
% * 查看一下体系的未知量（symbolic）

Diamond.symvar_list
%% 
% * 导入 KPOINTS信息 高对称点 高对称路径
% * 这里额外配置高对称点

Diamond = Diamond<'KPOINTS_Diamond';
[klist_l,kpoints_l,kpoints_name] = Diamond.kpath_information();
%% 利用MATLAB(2020)控件调整参数 - DFT
%% 
% * 导入DFT数据

Efermi =  9.85855597;
EIGENCAR_DFT = EIGENVAL_read('vasp','EIGENVAL_Diamond',Efermi); 
%% 
% * 创建滑块

E__6_0 = 0;
E__6_1 = 1.6177;
VppP_1 = 1.58;
VppS_1 = -5;
VspS_1 = -6;
VssS_1 = 5.4;
Fermi  = 0;
%% 
% * 给TB中的符号化变量赋值

Diamond_n = Diamond.Subsall();
%% 
% * 生成能带

EIGENCAR = Diamond_n.EIGENCAR_gen()-Fermi;
%% 
% * 画出能带

[fig,ax]= bandplot(EIGENCAR_DFT,[-30,30],'title',"Diamond-TB-VppP_1="+string(VppP_1),'Color','b','POSCAR','POSCAR_Diamond','KPOINTS','KPOINTS_Diamond');
[fig,ax]= bandplot(EIGENCAR ,[-30,30],'title',"Diamond-TB-VppP_1="+string(VppP_1),'ax',ax,...
    'POSCAR','POSCAR_Diamond','Color','r','KPOINTS','KPOINTS_Diamond');
%% 利用NM办法多参数拟合DFT (初值依赖)
% NM

Efermi =  9.85855597;
EIGENCAR_DFT = EIGENVAL_read('vasp','EIGENVAL_Diamond',Efermi);
Diamond = Diamond.subs(sym('E__6_0'),0);
% 拟合参数设置
% 设定拟合范围：

options_extra.NBAND_range_DFT = [1:5];
options_extra.NBAND_range = [1:5];
options_extra.klist_range = ':';
options_extra.E_range = [];
%% 
% 默认大小和斜率等权

options_extra.weight_list = [1,1];
%% 
% 键值对：
%% 
% * ‘EIGENCAR_DFT’ 为你的DFT 能带变量名
% * FITobj 为你的拟合对象变量名
% * ‘extra’ 为你的设定的能量范围
% * 'algorithm' 为你选择的比较方法 默认为同时比较大小和斜率

%SKTB_single = subs(SKTB);
Loss_func_TB = @(para) TBkit.loss_func(para, ...
    'FITobj','Diamond',...
    'DFTBAND','EIGENCAR_DFT',...
    'extra','options_extra',...
    'algorithm','pure_comparison' ...
)     
% 初值给定

%SKTB = SKTB.subs([sym('E__6_1') sym('VppP_1')],[0,2.71353]);
% SKTB.symvar_list
x0 = [ E__6_1, VppP_1, VppS_1, VspS_1, VssS_1];
% 进行拟合

options = optimset('PlotFcns',@optimplotfval,'Display','iter');
x = fminsearch(Loss_func_TB,x0,options);result = mat2cell(x,1,ones(1,length(x)));
E__6_1 = x(1)
VppP_1 = x(2)
VppS_1 = x(3)
VspS_1 = x(4)
VssS_1 = x(5)
%% 
% * 给TB中的符号化变量赋值

Diamond_n = Diamond.Subsall();
%% 
% * 生成能带

EIGENCAR = Diamond_n.EIGENCAR_gen()-Fermi;
%% 
% * 画出能带

fontname = "Helvetica";
ax =  bandplot(EIGENCAR_DFT,[-30,30],'title',"Diamond-TB-VppP_1="+string(VppP_1),'Color','b','POSCAR','POSCAR_Diamond','KPOINTS','KPOINTS_Diamond');
bandplot(EIGENCAR ,[-30,30],'title',"Diamond-TB-VppP_1="+string(VppP_1),'ax',ax,...
    'POSCAR','POSCAR_Diamond','Color','r','KPOINTS','KPOINTS_Diamond');
%% 
% 
% 
%